/* CS5 - Channel Services src/parse.c
 * Copyright (c) 1998 Chris Birch <cs5@othernet.org>
 * Original code and design by Michael Dabrowski <devon@othernet.org> CS4.0
 * All further GNU development and publication rights of this software are
 * granted to Chris Birch by Michael Dabrowski.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 1, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */           


#include <bot.h>

void parse(char *line)
{
   int i = 0;
   char *sample = NULL, *nline = NULL, *cmd = NULL, *rest = NULL, *rest2 = NULL, *who = NULL, test[1000], *test2 = NULL, *tmsg = NULL, *test3 = NULL, *test4 = NULL, *nwnk = NULL, *nwts = NULL, *server = NULL, *botnum, *who2, *test5;
   char *samp1 = NULL, *samp2 = NULL, *samp3 = NULL, *samp4 = NULL, *samp5 = NULL, *samp6 = NULL, *ptr = NULL, *ptr1 = NULL, *ptr2 = NULL, *ptr3 = NULL, nrest[10000], logit[10000];
   char *nwho = NULL;
   int nick_server = 0;
   int auth_server = 1;

   trailing_blanks(line);
   
   if(strlen(line) > 524)
   {
       return;
   }
   
   strcpy(test, line);

   if(*line)
   {
		 if(who = strchr(line, ' '))  *who++ = '\0';
			 cmd = line;
		 if(rest = strchr(who, ' ')) *rest++ = '\0'; 
		 else rest = "NONE";
			
	 		/* message privé */
		#ifdef DEBUG
		printf("Line :[%s]\n", test);
		#endif
		if(!(strncmp(who, "PRIVMSG", 7)) && !(*rest == '#'))
		 {
			if(who = strchr(line, ':')) *who++ ='\0';
			if(rest = strchr(test, ' ')) *rest++ ='\0';
			cmd = "PRIVMSG";

         }

		/* changement de nick */ 		
		
		if(!strncmp(who, "NICK", 4))
		 {
			if(who = strchr(line, ':')) *who++ ='\0';
			if(test2 = strchr(test, ' ')) *test2++ = '\0';
			if(nwnk = strchr(test2, ' ')) *nwnk++ = '\0';
			if(nwts = strchr(nwnk, ' ')) *nwts++ = '\0';
			nwho = nick2num(who);
		    replace_node(nwho, nwnk);
         }
		 		
				/* QUIT */
		
		if(!strncmp(who, "QUIT", 4))
		 {
		    if(who = strchr(line, ':')) *who++ ='\0';
			 cmd = "QUIT";
		}
	   	
		/* changement de mode */
		
		if(!strncmp(who, "MODE", 4))
		 {
		    if(who = strchr(line, ':')) *who++ ='\0';
			cmd = "MODE";
		}
	    
		/* TOPIC */

		if(!strncmp(who, "TOPIC", 5))
		 { 
			if(who = strchr(line, ':')) *who++ ='\0';
			if(test3 = strchr(test, ':')) *test3++ = '\0';
     	    if(rest = strchr(test3, ' ')) *rest++ = '\0';
			cmd = "TOPIC";
	      }

		/* RAW TOPIC */

		if(!strncmp(who, "332", 3))
		 { 
			if(who = strchr(line, ':')) *who++ ='\0';
			if(test3 = strchr(test, ':')) *test3++ = '\0';
     	    if(rest = strchr(test3, ' ')) *rest++ = '\0';
			cmd = "332";
	      }

		  /* RAW MODES */

		  if(!strncmp(who, "324", 3))
		 { 
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(test3 = strchr(test, ' ')) *test3++ ='\0';
     	    if(rest = strchr(test3, ' ')) *rest++ = '\0';
			cmd = "324";
	      }

		  /* RAW BAN */

		  if(!strncmp(who, "353", 3))
		 { 
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(test3 = strchr(test, ' ')) *test3++ ='\0';
     	    if(rest = strchr(test3, ' ')) *rest++ = '\0';
			cmd = "353";
	      }
		  
		  /* RAW BAN */

		  if(!strncmp(who, "367", 3))
		 { 
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(test3 = strchr(test, ' ')) *test3++ ='\0';
     	    if(rest = strchr(test3, ' ')) *rest++ = '\0';
			cmd = "367";
	      }


		  /* KILL */

		  if(!strncmp(who, "KILL", 4))
		 { 
		    if(test3 = strchr(test, ' ')) *test3++ ='\0';
     	    if(who = strchr(test3, ' ')) *who++ = '\0';
			if(rest = strchr(who, ' ')) *rest++ ='\0';
			cmd = "KILL";
	      }

		  /* SJOIN */

		 if(!strncmp(who, "SJOIN", 5))
		 {  
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(rest = strchr(test, ' ')) *rest++ = '\0';
			cmd = "JOIN";
		  }
		  
		  /* AWAY */

		 if(!strncmp(who, "AWAY", 4))
		 {  
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(rest = strchr(test, ' ')) *rest++ = '\0';
			cmd = "AWAY";
		  }


		/* SERVER */
			  
	   if(!strcmp(who, "SERVER"))
        {  
		  if(who = strchr(line, ':')) *who++ ='\0';
		  if(rest = strchr(test, ' ')) *rest++ = '\0';
          cmd = "SERVER";
         } 


		 
		 /* KICK */

		 if(!strncmp(who, "KICK", 4))
		 {  
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(rest = strchr(test, ' ')) *rest++ = '\0';
			cmd = "KICK";
		 }

		 /* PART */
		 
		 if(!strncmp(who, "PART", 4))
		 {  
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(rest = strchr(test, ' ')) *rest++ = '\0';
			cmd = "PART";
		 }
		
		/* PONG */
		 
		 if(!strncmp(who, "PONG", 4))
		 {  
			if(who = strchr(line, ':')) *who++ ='\0';
		    if(rest = strchr(test, ' ')) *rest++ = '\0';
			cmd = "PONG";
		 }




	   #ifdef DEBUG
	   printf("who : %s cmd : %s rest : %s\n", who, cmd, rest);
	   #endif

         if(strcmp(cmd, "ACTION") && strcmp(cmd, "AWAY") && *rest == '#' && !strcmp(who, "PRIVMSG"))
         {
			if(who = strchr(line, ':')) *who++ ='\0';
			if(samp1 = strchr(test, ' ')) *samp1++ = '\0';
			if(rest = strchr(samp1, ' ')) *rest++;
            if(ptr = strchr(samp1, ':')) *ptr++ = '\0';
			cmd = "PRIVMSG";

			if(*ptr == comchar)
            {
               *ptr++;

			   if(ptr1 = strchr(ptr, ' ')) *ptr1++ = '\0';

               for(i = 0; *commands[i].name; i++) 
               {
                  if(!strcasecmp(ptr, commands[i].name) && commands[i].secure && ptr1 == NULL) 
                  {
                     strlwr(ptr);
                     do_help(who, ptr);
                     return;
                  }
                  if(!strcasecmp(ptr, commands[i].name) && commands[i].secure && ptr1 != NULL) 
                  {
                     nwho = nick2num(who);
                     send_to_server(":%s NOTICE %s : Security Violation - Possible open display of password\n", bot.nick, who);
                     send_to_server(":%s NOTICE %s : Please use private message to %s when using passwords\n", bot.nick, who, bot.nick);
                     return;
                  }
                  if(!strcasecmp(ptr, commands[i].name) && commands[i].nochan) 
                  {
                     if(ptr1 != NULL)
                        sprintf(nrest, "%s :%s %s", bot.nick, ptr, ptr1);
                     else
                        sprintf(nrest, "%s :%s", bot.nick, ptr);
                     rest = nrest;
                  }
                  else if(!strcasecmp(ptr, commands[i].name) && !commands[i].nochan) 
                  {
                     if(ptr1 != NULL)
                     {
                        if(ptr1[0] == '#')
                           sprintf(nrest, "%s :%s %s", bot.nick, ptr, ptr1);
                        else
                           sprintf(nrest, "%s :%s %s%s", bot.nick, ptr, rest, ptr1);

                     }
                     else
                        sprintf(nrest, "%s :%s %s", bot.nick, ptr, rest);
                     rest = nrest;
                  }
               }
   
   if(!strcmp(who, "PRIVMSG") && strstr(rest, botnum) && logging)
   { 	

      sprintf(logit, ":%s %s %s\n", who, cmd, rest);
      log(BOT_LOG, "R [%s] %s",date(), logit);
   }
            }
            else return;
         }
   }

#ifdef DEBUG
printf("Parse - Command: [%s] Who: [%s] Rest: [%s]\n", cmd, who, rest);  
   if(msglog)
   {
      if(strcmp(cmd,"PONG") && strcmp(cmd, "PRIVMSG"))
      {
         command_log(who, cmd, rest);
      }
   }
#endif

   for(i = 0; parse_command[i].name; i++) 
   {       
	  if(!strcmp(cmd, parse_command[i].name)) 
      {
         parse_command[i].function(who, rest);
         return;
      }
   }
}
